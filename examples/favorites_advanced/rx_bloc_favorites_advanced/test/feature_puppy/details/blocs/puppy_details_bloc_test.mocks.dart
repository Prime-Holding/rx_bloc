// Mocks generated by Mockito 5.4.4 from annotations
// in rx_bloc_favorites_advanced/test/feature_puppy/details/blocs/puppy_details_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:favorites_advanced_base/models.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:rx_bloc_favorites_advanced/base/common_blocs/coordinator_bloc.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCoordinatorEvents_0 extends _i1.SmartFake
    implements _i2.CoordinatorEvents {
  _FakeCoordinatorEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinatorStates_1 extends _i1.SmartFake
    implements _i2.CoordinatorStates {
  _FakeCoordinatorStates_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CoordinatorStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorStates extends _i1.Mock implements _i2.CoordinatorStates {
  MockCoordinatorStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.Puppy> get onPuppyUpdated => (super.noSuchMethod(
        Invocation.getter(#onPuppyUpdated),
        returnValue: _i3.Stream<_i4.Puppy>.empty(),
      ) as _i3.Stream<_i4.Puppy>);

  @override
  _i3.Stream<List<_i4.Puppy>> get onFetchedPuppiesWithExtraDetails =>
      (super.noSuchMethod(
        Invocation.getter(#onFetchedPuppiesWithExtraDetails),
        returnValue: _i3.Stream<List<_i4.Puppy>>.empty(),
      ) as _i3.Stream<List<_i4.Puppy>>);

  @override
  _i3.Stream<List<_i4.Puppy>> get onPuppiesUpdated => (super.noSuchMethod(
        Invocation.getter(#onPuppiesUpdated),
        returnValue: _i3.Stream<List<_i4.Puppy>>.empty(),
      ) as _i3.Stream<List<_i4.Puppy>>);
}

/// A class which mocks [CoordinatorEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorEvents extends _i1.Mock implements _i2.CoordinatorEvents {
  MockCoordinatorEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void puppyUpdated(_i4.Puppy? puppy) => super.noSuchMethod(
        Invocation.method(
          #puppyUpdated,
          [puppy],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void puppiesWithExtraDetailsFetched(List<_i4.Puppy>? puppies) =>
      super.noSuchMethod(
        Invocation.method(
          #puppiesWithExtraDetailsFetched,
          [puppies],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoordinatorBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocType extends _i1.Mock
    implements _i2.CoordinatorBlocType {
  MockCoordinatorBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.CoordinatorEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeCoordinatorEvents_0(
          this,
          Invocation.getter(#events),
        ),
      ) as _i2.CoordinatorEvents);

  @override
  _i2.CoordinatorStates get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeCoordinatorStates_1(
          this,
          Invocation.getter(#states),
        ),
      ) as _i2.CoordinatorStates);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

// Mocks generated by Mockito 5.4.4 from annotations
// in booking_app/test/feature_hotel_details/blocs/hotel_details_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:booking_app/base/common_blocs/coordinator_bloc.dart' as _i3;
import 'package:booking_app/base/common_blocs/hotels_extra_details_bloc.dart'
    as _i4;
import 'package:booking_app/base/services/hotels_service.dart' as _i5;
import 'package:favorites_advanced_base/core.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHotel_0 extends _i1.SmartFake implements _i2.Hotel {
  _FakeHotel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinatorBlocEvents_1 extends _i1.SmartFake
    implements _i3.CoordinatorBlocEvents {
  _FakeCoordinatorBlocEvents_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCoordinatorBlocStates_2 extends _i1.SmartFake
    implements _i3.CoordinatorBlocStates {
  _FakeCoordinatorBlocStates_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotelsExtraDetailsBlocEvents_3 extends _i1.SmartFake
    implements _i4.HotelsExtraDetailsBlocEvents {
  _FakeHotelsExtraDetailsBlocEvents_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotelsExtraDetailsBlocStates_4 extends _i1.SmartFake
    implements _i4.HotelsExtraDetailsBlocStates {
  _FakeHotelsExtraDetailsBlocStates_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HotelsService].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelsService extends _i1.Mock implements _i5.HotelsService {
  MockHotelsService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Hotel> hotelById(String? hotelId) => (super.noSuchMethod(
        Invocation.method(
          #hotelById,
          [hotelId],
        ),
        returnValue: _i6.Future<_i2.Hotel>.value(_FakeHotel_0(
          this,
          Invocation.method(
            #hotelById,
            [hotelId],
          ),
        )),
      ) as _i6.Future<_i2.Hotel>);
}

/// A class which mocks [CoordinatorBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocType extends _i1.Mock
    implements _i3.CoordinatorBlocType {
  MockCoordinatorBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CoordinatorBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeCoordinatorBlocEvents_1(
          this,
          Invocation.getter(#events),
        ),
      ) as _i3.CoordinatorBlocEvents);

  @override
  _i3.CoordinatorBlocStates get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeCoordinatorBlocStates_2(
          this,
          Invocation.getter(#states),
        ),
      ) as _i3.CoordinatorBlocStates);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoordinatorBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocEvents extends _i1.Mock
    implements _i3.CoordinatorBlocEvents {
  MockCoordinatorBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void hotelUpdated(_i2.Hotel? hotel) => super.noSuchMethod(
        Invocation.method(
          #hotelUpdated,
          [hotel],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void hotelsWithExtraDetailsFetched(List<_i2.Hotel>? hotels) =>
      super.noSuchMethod(
        Invocation.method(
          #hotelsWithExtraDetailsFetched,
          [hotels],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [CoordinatorBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockCoordinatorBlocStates extends _i1.Mock
    implements _i3.CoordinatorBlocStates {
  MockCoordinatorBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Stream<_i2.Hotel> get onHotelUpdated => (super.noSuchMethod(
        Invocation.getter(#onHotelUpdated),
        returnValue: _i6.Stream<_i2.Hotel>.empty(),
      ) as _i6.Stream<_i2.Hotel>);

  @override
  _i6.Stream<List<_i2.Hotel>> get onFetchedHotelsWithExtraDetails =>
      (super.noSuchMethod(
        Invocation.getter(#onFetchedHotelsWithExtraDetails),
        returnValue: _i6.Stream<List<_i2.Hotel>>.empty(),
      ) as _i6.Stream<List<_i2.Hotel>>);

  @override
  _i6.Stream<List<_i2.Hotel>> get onHotelsUpdated => (super.noSuchMethod(
        Invocation.getter(#onHotelsUpdated),
        returnValue: _i6.Stream<List<_i2.Hotel>>.empty(),
      ) as _i6.Stream<List<_i2.Hotel>>);
}

/// A class which mocks [HotelsExtraDetailsBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelsExtraDetailsBlocType extends _i1.Mock
    implements _i4.HotelsExtraDetailsBlocType {
  MockHotelsExtraDetailsBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.HotelsExtraDetailsBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeHotelsExtraDetailsBlocEvents_3(
          this,
          Invocation.getter(#events),
        ),
      ) as _i4.HotelsExtraDetailsBlocEvents);

  @override
  _i4.HotelsExtraDetailsBlocStates get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeHotelsExtraDetailsBlocStates_4(
          this,
          Invocation.getter(#states),
        ),
      ) as _i4.HotelsExtraDetailsBlocStates);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HotelsExtraDetailsBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelsExtraDetailsBlocEvents extends _i1.Mock
    implements _i4.HotelsExtraDetailsBlocEvents {
  MockHotelsExtraDetailsBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void fetchExtraDetails(
    _i2.Hotel? hotel, {
    bool? allProps = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #fetchExtraDetails,
          [hotel],
          {#allProps: allProps},
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HotelsExtraDetailsBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelsExtraDetailsBlocStates extends _i1.Mock
    implements _i4.HotelsExtraDetailsBlocStates {
  MockHotelsExtraDetailsBlocStates() {
    _i1.throwOnMissingStub(this);
  }
}

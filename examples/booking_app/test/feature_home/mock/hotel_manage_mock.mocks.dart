// Mocks generated by Mockito 5.4.4 from annotations
// in booking_app/test/feature_home/mock/hotel_manage_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:booking_app/base/common_blocs/hotel_manage_bloc.dart' as _i2;
import 'package:favorites_advanced_base/core.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeHotelManageBlocEvents_0 extends _i1.SmartFake
    implements _i2.HotelManageBlocEvents {
  _FakeHotelManageBlocEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeHotelManageBlocStates_1 extends _i1.SmartFake
    implements _i2.HotelManageBlocStates {
  _FakeHotelManageBlocStates_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HotelManageBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelManageBlocStates extends _i1.Mock
    implements _i2.HotelManageBlocStates {
  MockHotelManageBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<bool> get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: _i3.Stream<bool>.empty(),
      ) as _i3.Stream<bool>);

  @override
  _i3.Stream<String> get error => (super.noSuchMethod(
        Invocation.getter(#error),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);

  @override
  _i3.Stream<String> get favoriteMessage => (super.noSuchMethod(
        Invocation.getter(#favoriteMessage),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
}

/// A class which mocks [HotelManageBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelManageBlocEvents extends _i1.Mock
    implements _i2.HotelManageBlocEvents {
  MockHotelManageBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void markAsFavorite({
    required _i4.Hotel? hotel,
    required bool? isFavorite,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #markAsFavorite,
          [],
          {
            #hotel: hotel,
            #isFavorite: isFavorite,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [HotelManageBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotelManageBlocType extends _i1.Mock
    implements _i2.HotelManageBlocType {
  MockHotelManageBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HotelManageBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeHotelManageBlocEvents_0(
          this,
          Invocation.getter(#events),
        ),
      ) as _i2.HotelManageBlocEvents);

  @override
  _i2.HotelManageBlocStates get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeHotelManageBlocStates_1(
          this,
          Invocation.getter(#states),
        ),
      ) as _i2.HotelManageBlocStates);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

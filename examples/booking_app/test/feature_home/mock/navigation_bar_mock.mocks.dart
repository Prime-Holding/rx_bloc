// Mocks generated by Mockito 5.4.4 from annotations
// in booking_app/test/feature_home/mock/navigation_bar_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:booking_app/feature_home/blocs/navigation_bar_bloc.dart' as _i2;
import 'package:favorites_advanced_base/models.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeNavigationBarBlocEvents_0 extends _i1.SmartFake
    implements _i2.NavigationBarBlocEvents {
  _FakeNavigationBarBlocEvents_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeNavigationBarBlocStates_1 extends _i1.SmartFake
    implements _i2.NavigationBarBlocStates {
  _FakeNavigationBarBlocStates_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [NavigationBarBlocStates].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationBarBlocStates extends _i1.Mock
    implements _i2.NavigationBarBlocStates {
  MockNavigationBarBlocStates() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<List<_i4.NavigationItem>> get items => (super.noSuchMethod(
        Invocation.getter(#items),
        returnValue: _i3.Stream<List<_i4.NavigationItem>>.empty(),
      ) as _i3.Stream<List<_i4.NavigationItem>>);

  @override
  _i3.Stream<_i4.NavigationItem> get selectedItem => (super.noSuchMethod(
        Invocation.getter(#selectedItem),
        returnValue: _i3.Stream<_i4.NavigationItem>.empty(),
      ) as _i3.Stream<_i4.NavigationItem>);

  @override
  _i3.Stream<String> get title => (super.noSuchMethod(
        Invocation.getter(#title),
        returnValue: _i3.Stream<String>.empty(),
      ) as _i3.Stream<String>);
}

/// A class which mocks [NavigationBarBlocEvents].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationBarBlocEvents extends _i1.Mock
    implements _i2.NavigationBarBlocEvents {
  MockNavigationBarBlocEvents() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void selectPage(_i4.NavigationItemType? item) => super.noSuchMethod(
        Invocation.method(
          #selectPage,
          [item],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [NavigationBarBlocType].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationBarBlocType extends _i1.Mock
    implements _i2.NavigationBarBlocType {
  MockNavigationBarBlocType() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.NavigationBarBlocEvents get events => (super.noSuchMethod(
        Invocation.getter(#events),
        returnValue: _FakeNavigationBarBlocEvents_0(
          this,
          Invocation.getter(#events),
        ),
      ) as _i2.NavigationBarBlocEvents);

  @override
  _i2.NavigationBarBlocStates get states => (super.noSuchMethod(
        Invocation.getter(#states),
        returnValue: _FakeNavigationBarBlocStates_1(
          this,
          Invocation.getter(#states),
        ),
      ) as _i2.NavigationBarBlocStates);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

// Mocks generated by Mockito 5.4.2 from annotations
// in rx_bloc_cli/test/extensions/arg_parser_extensions_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:args/src/arg_parser.dart' as _i2;
import 'package:args/src/arg_results.dart' as _i3;
import 'package:args/src/option.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeArgParser_0 extends _i1.SmartFake implements _i2.ArgParser {
  _FakeArgParser_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeArgResults_1 extends _i1.SmartFake implements _i3.ArgResults {
  _FakeArgResults_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ArgParser].
///
/// See the documentation for Mockito's code generation for more information.
class MockArgParser extends _i1.Mock implements _i2.ArgParser {
  @override
  Map<String, _i4.Option> get options => (super.noSuchMethod(
        Invocation.getter(#options),
        returnValue: <String, _i4.Option>{},
        returnValueForMissingStub: <String, _i4.Option>{},
      ) as Map<String, _i4.Option>);

  @override
  Map<String, _i2.ArgParser> get commands => (super.noSuchMethod(
        Invocation.getter(#commands),
        returnValue: <String, _i2.ArgParser>{},
        returnValueForMissingStub: <String, _i2.ArgParser>{},
      ) as Map<String, _i2.ArgParser>);

  @override
  bool get allowTrailingOptions => (super.noSuchMethod(
        Invocation.getter(#allowTrailingOptions),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  bool get allowsAnything => (super.noSuchMethod(
        Invocation.getter(#allowsAnything),
        returnValue: false,
        returnValueForMissingStub: false,
      ) as bool);

  @override
  String get usage => (super.noSuchMethod(
        Invocation.getter(#usage),
        returnValue: '',
        returnValueForMissingStub: '',
      ) as String);

  @override
  _i2.ArgParser addCommand(
    String? name, [
    _i2.ArgParser? parser,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #addCommand,
          [
            name,
            parser,
          ],
        ),
        returnValue: _FakeArgParser_0(
          this,
          Invocation.method(
            #addCommand,
            [
              name,
              parser,
            ],
          ),
        ),
        returnValueForMissingStub: _FakeArgParser_0(
          this,
          Invocation.method(
            #addCommand,
            [
              name,
              parser,
            ],
          ),
        ),
      ) as _i2.ArgParser);

  @override
  void addFlag(
    String? name, {
    String? abbr,
    String? help,
    bool? defaultsTo = false,
    bool? negatable = true,
    void Function(bool)? callback,
    bool? hide = false,
    List<String>? aliases = const [],
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addFlag,
          [name],
          {
            #abbr: abbr,
            #help: help,
            #defaultsTo: defaultsTo,
            #negatable: negatable,
            #callback: callback,
            #hide: hide,
            #aliases: aliases,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addOption(
    String? name, {
    String? abbr,
    String? help,
    String? valueHelp,
    Iterable<String>? allowed,
    Map<String, String>? allowedHelp,
    String? defaultsTo,
    void Function(String?)? callback,
    bool? mandatory = false,
    bool? hide = false,
    List<String>? aliases = const [],
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addOption,
          [name],
          {
            #abbr: abbr,
            #help: help,
            #valueHelp: valueHelp,
            #allowed: allowed,
            #allowedHelp: allowedHelp,
            #defaultsTo: defaultsTo,
            #callback: callback,
            #mandatory: mandatory,
            #hide: hide,
            #aliases: aliases,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addMultiOption(
    String? name, {
    String? abbr,
    String? help,
    String? valueHelp,
    Iterable<String>? allowed,
    Map<String, String>? allowedHelp,
    Iterable<String>? defaultsTo,
    void Function(List<String>)? callback,
    bool? splitCommas = true,
    bool? hide = false,
    List<String>? aliases = const [],
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #addMultiOption,
          [name],
          {
            #abbr: abbr,
            #help: help,
            #valueHelp: valueHelp,
            #allowed: allowed,
            #allowedHelp: allowedHelp,
            #defaultsTo: defaultsTo,
            #callback: callback,
            #splitCommas: splitCommas,
            #hide: hide,
            #aliases: aliases,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void addSeparator(String? text) => super.noSuchMethod(
        Invocation.method(
          #addSeparator,
          [text],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.ArgResults parse(Iterable<String>? args) => (super.noSuchMethod(
        Invocation.method(
          #parse,
          [args],
        ),
        returnValue: _FakeArgResults_1(
          this,
          Invocation.method(
            #parse,
            [args],
          ),
        ),
        returnValueForMissingStub: _FakeArgResults_1(
          this,
          Invocation.method(
            #parse,
            [args],
          ),
        ),
      ) as _i3.ArgResults);

  @override
  dynamic defaultFor(String? option) => super.noSuchMethod(
        Invocation.method(
          #defaultFor,
          [option],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic getDefault(String? option) => super.noSuchMethod(
        Invocation.method(
          #getDefault,
          [option],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i4.Option? findByAbbreviation(String? abbr) => (super.noSuchMethod(
        Invocation.method(
          #findByAbbreviation,
          [abbr],
        ),
        returnValueForMissingStub: null,
      ) as _i4.Option?);

  @override
  _i4.Option? findByNameOrAlias(String? name) => (super.noSuchMethod(
        Invocation.method(
          #findByNameOrAlias,
          [name],
        ),
        returnValueForMissingStub: null,
      ) as _i4.Option?);
}
